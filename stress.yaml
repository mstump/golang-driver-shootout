#
# This is an example YAML profile for cassandra-stress
#
# insert data
# cassandra-stress user profile=stress.yaml ops(insert=1)

#
# Keyspace info
#
keyspace: examples

#
# The CQL for creating a keyspace (optional if it already exists)
#
keyspace_definition: |
  CREATE KEYSPACE examples WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

#
# Table info
#
table: songs

#
# The CQL for creating a table you wish to stress (optional if it already exists)
#
table_definition: |
  CREATE TABLE examples.songs (
        id uuid PRIMARY KEY,
        title text,
        album text,
        artist text,
        tags set<text>
    );
#
# Optional meta information on the generated columns in the above table
# The min and max only apply to text and blob types
# The distribution field represents the total unique population
# distribution of that column across rows.  Supported types are
#
#      EXP(min..max)                        An exponential distribution over the range [min..max]
#      EXTREME(min..max,shape)              An extreme value (Weibull) distribution over the range [min..max]
#      GAUSSIAN(min..max,stdvrng)           A gaussian/normal distribution, where mean=(min+max)/2, and stdev is (mean-min)/stdvrng
#      GAUSSIAN(min..max,mean,stdev)        A gaussian/normal distribution, with explicitly defined mean and stdev
#      UNIFORM(min..max)                    A uniform distribution over the range [min, max]
#      FIXED(val)                           A fixed distribution, always returning the same value
#      Aliases: extr, gauss, normal, norm, weibull
#
#      If preceded by ~, the distribution is inverted
#
# Defaults for all columns are size: uniform(4..8), population: uniform(1..100B), cluster: fixed(1)
#
columnspec:
  - name: title
    size: fixed(64)
  - name: album
    size: fixed(64)
  - name: artist
    size: fixed(64)


insert:
  partitions: fixed(1)             # number of unique partitions to update in a single operation
                                   # if batchcount > 1, multiple batches will be used but all partitions will
                                   # occur in all batches (unless they finish early); only the row counts will vary
  batchtype: UNLOGGED              # type of batch to use


queries:
   simple1:
      cql: select * from songs where id = ?
      fields: samerow             # samerow or multirow (select arguments from the same row, or randomly from all rows in the partition)
